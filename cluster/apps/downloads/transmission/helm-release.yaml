---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: transmission
  namespace: downloads
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: transmission
      version: 8.0.1
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  values:
    image:
      repository: ghcr.io/k8s-at-home/transmission
      tag: latest
    env:
      TRANSMISSION_RPC_AUTHENTICATION_REQUIRED: "true"
      TRANSMISSION_DOWNLOAD_DIR: /media/downloads/complete
      TRANSMISSION_INCOMPLETE_DIR: /media/downloads/incomplete
      TZ: "Europe/Amsterdam"
      TRANSMISSION_RPC_USERNAME:
        valueFrom:
          secretKeyRef:
            name: transmission
            key: TRANSMISSION_RPC_USERNAME
      TRANSMISSION_RPC_PASSWORD:
        valueFrom:
          secretKeyRef:
            name: transmission
            key: TRANSMISSION_RPC_PASSWORD


    podSecurityContext:
      fsGroup: 0
      # runAsNonRoot: true
      runAsUser: 0
      runAsGroup: 0
      fsGroupChangePolicy: "Always"
      # supplementalGroups:
      #   - 100

    ingress:
      main:
        enabled: true
        ingressClassName: "traefik"
        annotations:
#          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
#          external-dns/is-public: "true"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          cert-manager.io/issue-temporary-certificate: "true"
          hajimari.io/enable: "true"
          hajimari.io/icon: "file-download-outline"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - host: download.${SECRET_DOMAIN}
            paths:
              - path: /transmission
                pathType: Prefix
        tls:
          - hosts:
              - download.${SECRET_DOMAIN}
            secretName: "download-tls"

    persistence:
      config:
        enabled: true
        existingClaim: transmission-config
      media:
        enabled: true
        existingClaim: media
      shared:
        enabled: true
        type: emptyDir
        mountPath: /shared

    addons:
#      netshoot:
#        enabled: true

      vpn:
        enabled: true
        # This Should be set to `openvpn`. This will set the add-on to use the default settings for OpenVPN based connections.
        type: openvpn

        openvpn:
          # This gets read by the Helm chart. The default OpenVPN image reads this and uses it to connect to the VPN provider.
          authSecret: openvpn-auth

        # If the podSecurityContext is set to run as a different user, make sure to run the OpenVPN container as root.
#        securityContext:
#          runAsGroup: 0
#          runAsUser: 0

        env:
          # Set this environment variable to 'on' to make sure all traffic gets routed through the VPN container.
          # Make sure to check the other environment variables for the OpenVPN image to see how you can exclude certain
          # traffic from these firewall rules.
          FIREWALL: 'on'
          ROUTE_1: ${NETWORK_K8S_CLUSTER_CIDR}
          ROUTE_2: ${NETWORK_K8S_SERVICE_CIDR}
          ROUTE_3: ${NETWORK_SERVER_CIDR}
          VPNPORT_1: "9091"

        # The .ovpn file provided by your VPN provider goes here.
        #
        # Any CA / certificate must either be placed inline, or provided through an additionalVolumeMount so that OpenVPN can find it.
        #
        # Pay close attention to the last 3 lines in this file. They must be added if you wish to run a script when the connection
        # is opened / closed.
        configFileSecret: openvpn-config

        # The scripts that get run when the VPN connection opens/closes are defined here.
        # The default scripts will write a string to represent the current connection state to a file.
        # Our qBittorrent image has a feature that can wait for this file to contain the word 'connected' before actually starting the application.
        scripts:
          up: |-
            #!/bin/bash
            /etc/openvpn/up.sh
            echo "connected" > /shared/vpnstatus

          down: |-
            #!/bin/bash
            /etc/openvpn/down.sh
            echo "disconnected" > /shared/vpnstatus
