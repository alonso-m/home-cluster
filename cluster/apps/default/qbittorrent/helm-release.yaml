---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: qbittorrent
  namespace: default
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: qbittorrent
      version: 13.0.1
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  values:
    image:
      repository: ghcr.io/k8s-at-home/qbittorrent
      tag: v4.3.9
      pullPolicy: Always

    hostname: qbittorrent

    # podAnnotations:
    #   secret.reloader.stakater.com/reload: "qbittorrent-vpnconfig"
    #   backup.velero.io/backup-volumes: config
    #   pre.hook.backup.velero.io/container: fsfreeze
    #   pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/data"]'
    #   post.hook.backup.velero.io/container: fsfreeze
    #   post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/data"]'

    podSecurityContext:
      supplementalGroups:
        - 65539

    settings:
      automaticPortSetup: false

    env:
      TZ: "Europe/Amsterdam"
      UMASK: "022"
      WAIT_FOR_VPN: "true"

    ingress:
      main:
        enabled: true
        ingressClassName: "traefik"
        annotations:
#          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
#          external-dns/is-public: "true"
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          cert-manager.io/issue-temporary-certificate: "true"
#            hajimari.io/enable: "true"
#            hajimari.io/icon: "shield-key"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - host: download.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - download.${SECRET_DOMAIN}
            secretName: "download-tls"

    persistence:
      config:
        enabled: true
        existingClaim: qbitorrent-config
      media:
        enabled: true
        existingClaim: media
      shared:
        enabled: true
        type: emptyDirtransmission
        mountPath: /shared
    resources:
      requests:
        cpu: "0.3"
        memory: "1000Mi"
      limits:
        memory: "4000Mi"

    # additionalContainers:
    #   fsfreeze:
    #     name: fsfreeze
    #     image: ghcr.io/k8s-at-home/fsfreeze:v2.37-r0
    #     volumeMounts:
    #       - name: config
    #         mountPath: /data
    #     securityContext:
    #       privileged: true

    addons:
#      netshoot:
#        enabled: true

      vpn:
        enabled: true
        # This Should be set to `openvpn`. This will set the add-on to use the default settings for OpenVPN based connections.
        type: openvpn

        openvpn:
          # This gets read by the Helm chart. The default OpenVPN image reads this and uses it to connect to the VPN provider.
          authSecret: openvpn-auth

        # If the podSecurityContext is set to run as a different user, make sure to run the OpenVPN container as root.
#        securityContext:
#          runAsGroup: 0
#          runAsUser: 0

        env:
          # Set this environment variable to 'on' to make sure all traffic gets routed through the VPN container.
          # Make sure to check the other environment variables for the OpenVPN image to see how you can exclude certain
          # traffic from these firewall rules.
          FIREWALL: 'on'

        # The .ovpn file provided by your VPN provider goes here.
        #
        # Any CA / certificate must either be placed inline, or provided through an additionalVolumeMount so that OpenVPN can find it.
        #
        # Pay close attention to the last 3 lines in this file. They must be added if you wish to run a script when the connection
        # is opened / closed.
        configFileSecret: openvpn-config

        # The scripts that get run when the VPN connection opens/closes are defined here.
        # The default scripts will write a string to represent the current connection state to a file.
        # Our qBittorrent image has a feature that can wait for this file to contain the word 'connected' before actually starting the application.
        scripts:
          up: |-
            #!/bin/bash
            /etc/openvpn/up.sh
            echo "connected" > /shared/vpnstatus

          down: |-
            #!/bin/bash
            /etc/openvpn/down.sh
            echo "disconnected" > /shared/vpnstatus

        resources:
          requests:
            cpu: "0.001"
            memory: 64Mi
          limits:
            memory: 128Mi
